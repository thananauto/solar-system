name: Solar System Workflow

on: 
  workflow_dispatch:
  pull_request: 
    types: [ opened ]
    branches: 
      - master
    
  push:
    branches:
      - main
      - 'feature/*'
    tags:
      - 'v*'


env:
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}  



jobs:
    unit-testing:
       # strategy:

        #    matrix:
        #     node-version: ['18', '19', '20']
        #     os: [ubuntu-latest, windows-latest ]
        services:
          mongo-nonprod:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017

        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 19
    
        - name: Install Dependencies
          run: npm install
         
        - name: node cached
          id: cache
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-${{ hashFiles('package-lock.json')}}
            
        - name: Unit Testing
          run: npm test
          env:
            MONGO_URI: "mongodb://localhost:27017/superData"
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password 
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml


    code-coverage:
        permissions:
          contents: write
          pull-requests: write
          repository-projects: write
        continue-on-error: true
        name: code coverage
        runs-on: ubuntu-latest
        services:
          mongo-nonprod:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo-db
        
        container: 
          image: node:21

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

      #  - name: Setup NodeJS Version
      #    uses: actions/setup-node@v3
      #    with:
      #      node-version: 19

        - name: node cached
          id: cache
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-${{ hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install
    
        - name: code coverage
          id: coverage
          continue-on-error: true
          run: npm run coverage
          env:
            MONGO_URI: "mongodb://localhost:27017/superData"
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password 
            
        - name: Code Coverage Summary Report
          uses: irongut/CodeCoverageSummary@v1.3.0
          with:
            filename: coverage/cobertura-coverage.xml 
            output: both  
            badge: true
            indicators: true
           

        - name: Archive Code Coverage Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Code coverage result
            path: coverage 

         
        - name: modfied the report
          if: ${{ steps.coverage.conclusion == 'success'}}
          id: badge
          run: |
            file=$(cat code-coverage-results.txt)

            for line in $file
            do
                newline='![Coverage Report]('$line')'
                echo -E  $newline
                echo "current_badge=$newline" >> "$GITHUB_OUTPUT"
                break
            done
          shell: bash    

        - name: Add comment
          if: always()
         
          uses: mshick/add-pr-comment@v2
          with:
            message: |
              **Status**  ${{ steps.badge.outputs.current_badge }}
               
           
            message-failure: |
              Workflow failed

    
    deploy:
      permissions: 
        packages: write
        contents: write
      
      env: 
        image: solar-system
      needs: [code-coverage, unit-testing]
      name: Deploy
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
               ${{ vars.DOCKER_USER_NAME }}/solar-system
               ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
     
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_PWD }}
                
      - name: Test a Docker images
        if: ${{ github.ref_type == 'tag' }}
        run: |
            export version=$(echo ${{ github.ref_name }}  | tr -d v)
            docker build -t ${{ vars.DOCKER_USER_NAME }}/solar-system:$version .
            docker images
            docker run --name solar-system -d \
            -e MONGO_URI=${{ env.MONGO_URI }} \
            -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
            ${{ vars.DOCKER_USER_NAME }}/solar-system:$version
           
      - name: push Docker image
        if: ${{ github.ref_type == 'tag' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
              ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    
    dev-deployment:
      needs: deploy
      name: Deploy to dev environment
      runs-on: ubuntu-latest
      environment: 
        name: dev
        url: http://${{ steps.ip-addr.outputs.IP_ADDRESS }}
      outputs:
        IP_ADDRESS: ${{ steps.ip-addr.outputs.IP_ADDRESS }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          
        - name: Install kubectl 
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.28.0'

        - name: set the kubeconfig files
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: google-authentication
          uses: 'google-github-actions/auth@v2'
          with:
             credentials_json: ${{ secrets.GOOGLE_APP_SECRET }}
      
        - name: install the gcloud cli
          uses: google-github-actions/setup-gcloud@v2
          with:
            project_id: solar-system
            install_components: 'gke-gcloud-auth-plugin'
      

        - name: replace token values 
          uses: cschleiden/replace-tokens@v1
          with:
              tokenPrefix: '_[_'
              tokenSuffix: '_]_'
              files: '["kubernetes/dev/*.yml"]'

          env:
              NAMESPACE: ${{ vars.NAMESPACE }}
              IMAGE: ${{ vars.DOCKER_USER_NAME }}/solar-system:latest
              REPLICAS: ${{ vars.REPLICAS }}

        - name: set mongo-db details and docker secrets
          run: |
                kubectl create secret generic mongo-db-creds -n ${{ vars.NAMESPACE }} \
                --from-literal=MONGO_URI=${{ vars.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -

                kubectl create secret docker-registry docker-secret -n ${{ vars.NAMESPACE }} \
                --docker-email=thananjayan1988@gmail.com \
                --docker-username=${{ vars.DOCKER_USER_NAME }} \
                --docker-password=${{ secrets.DOCKER_PWD }} \
                --docker-server=https://index.docker.io/v1/ \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -

               

        - name: Deploy to dev environment
          run: |
              kubectl apply -f kubernetes/dev -n ${{ vars.NAMESPACE }}

        - name: Get Ingress Ip address
          id: ip-addr
          run: |
                echo "IP_ADDRESS=$(kubectl get ingress -n ${{ vars.NAMESPACE }} -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}")" >> "$GITHUB_OUTPUT"
    
    dev-integration-test:
      runs-on: ubuntu-latest
      needs: dev-deployment
      steps:
        - name: check the dev deployment test
          env:
            addr: ${{ needs.dev-deployment.outputs.IP_ADDRESS }}
          run: | 
            curl http://${{ env.addr}}/live | jq -r .status | grep -i live

    prod-deployment:
      name: Deploy to prod environment
      needs: dev-integration-test
      runs-on: ubuntu-latest
      environment: 
        name: prod
        url: http://${{ steps.ip-addr.outputs.PROD_IP_ADDRESS }}
      outputs:
        PROD_IP_ADDRESS: ${{ steps.ip-addr.outputs.PROD_IP_ADDRESS }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          
        - name: Install kubectl 
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.28.0'

        - name: set the kubeconfig files
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: google-authentication
          uses: 'google-github-actions/auth@v2'
          with:
              credentials_json: ${{ secrets.GOOGLE_APP_SECRET }}
      
        - name: install the gcloud cli
          uses: google-github-actions/setup-gcloud@v2
          with:
            project_id: solar-system
            install_components: 'gke-gcloud-auth-plugin'
     
        - name: replace token values 
          uses: cschleiden/replace-tokens@v1
          with:
              tokenPrefix: '_[_'
              tokenSuffix: '_]_'
              files: '["kubernetes/prod/*.yml"]'
          env:
              NAMESPACE: ${{ vars.NAMESPACE }}
              IMAGE: ${{ vars.DOCKER_USER_NAME }}/solar-system:latest
              REPLICAS: ${{ vars.REPLICAS }}

        - name: set mongo-db details and docker secret
          run: |
                kubectl create secret generic mongo-db-creds -n ${{ vars.NAMESPACE }} \
                --from-literal=MONGO_URI=${{ vars.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -

                kubectl create secret docker-registry docker-secret -n ${{ vars.NAMESPACE }} \
                --docker-email=thananjayan1988@gmail.com \
                --docker-username=${{ vars.DOCKER_USER_NAME }} \
                --docker-password=${{ secrets.DOCKER_PWD }} \
                --docker-server=https://index.docker.io/v1/ \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -

                

        - name: Deploy to prod environment
          run: |
              kubectl apply -f kubernetes/prod -n ${{ vars.NAMESPACE }}

        - name: Get Ingress Ip address
          id: ip-addr
          run: |
                echo "PROD_IP_ADDRESS=$(kubectl get ingress -n ${{ vars.NAMESPACE }} -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}")" >> "$GITHUB_OUTPUT"
    
        
    prod-integration-test:
      runs-on: ubuntu-latest
      needs: prod-deployment
      steps:
        - name: check the prod deployment test
          env:
            addr: ${{ needs.prod-deployment.outputs.PROD_IP_ADDRESS }}
          run: | 
            curl http://${{ env.addr}}/live | jq -r .status | grep -i live   